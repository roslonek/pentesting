# -*- coding: utf-8 -*-
"""
Created on Wed Jun  1 13:19:49 2022

@Summary: A module for collecting CVE details information from  RHEL advisory portal.

@author: Robert Roslonek

@Requires-Python: >=3

@Maintainer-email: "Robert Roslonek" <roslonek@gmail.com>

@License: GPL version 3

"""
import os
#import rhsecapi
#import requests
import json
import urllib, json,re, socket, sys, datetime
from urllib.error import URLError, HTTPError

#--------Gets information from Red Hat VULN API service about given CVE
#proxies = {'http': 'http://myproxy.example.com:1234'}
# API docs: https://access.redhat.com/documentation/en-us/red_hat_security_data_api/1.0/html/red_hat_security_data_api/cve
#usage
def getCVEDetailsRH(CVE, proxiesDict):
 
 
  print ("CVE "+CVE)
  #u = " (https://access.redhat.com/security/cve/{0})".format(CVE)
  #u2="https://access.redhat.com/hydra/rest/securitydata/cve.json"
  u="https://access.redhat.com/hydra/rest/securitydata/cve/{0}.json".format(CVE)
  #u="https://access.redhat.com/hydra/rest/securitydata/cve/CVE-2016-6302.json"
  print(u)
 


    #if field is empty reach whole payload
  try:

      user_agent = {'User-agent': 'Mozilla/5.0'}

      print("Using HTTP proxy %s" % proxiesDict['http'])
      proxy_support = urllib.request.ProxyHandler(proxiesDict)
      opener = urllib.request.build_opener(proxy_support)
      urllib.request.install_opener(opener)

      
      #To create spefic query experiment with below format and change url to u2
      #values={'paste_lang': lang,'api_submit': 'true','mode':'json'}
      #values={'ids':CVE } #, 'product':'linux 7'}
      #data = urllib.parse.urlencode(values)
      #data = data.encode('ascii')
      
      data=None
      
      req = urllib.request.Request(u,data,user_agent,"POST")
      dataS=""
      with urllib.request.urlopen(req) as conn:          
          dataS = json.loads(conn.read().decode())
          # Closing the connection
          conn.close()
         
  except HTTPError as e:
     print('The server couldn\'t fulfill the request.')
     print('Error code: ', e.code)
  except URLError as e:
     print('We failed to reach a server.')
     print('Reason: ', e.reason)
    
  return dataS

# Get information from Redhat whether fix is available and in which version
#   #Redhat info:
#   #    AffectedRelease - a released Erratum that fixes the flaw for a particular product.
#   #    PackageState - Information about a package / product where no fix has been released yet.
def getRHFixStateinCVE(CVE_json, product_release):

 
    # Filter json to select target 
    ### transform to Dict to filter
    affected_state="NA"
  
    affectedReleases=cveDetails["affected_release"]
    for r in affectedReleases:
        if (r["product_name"]==product_release):
            affected_state="Fixed:"+r["product_name"]
    
    
    #for checking which Products are affected (but not fixed)
    if( affected_state=="NA" ):    
        no_fix="Affected no fix found"
        input_array = cveDetails["package_state"]

        for i_dict in input_array:
            #print (i_dict["product_name"] + " " +i_dict["package_name"] + " "+ i_dict["fix_state"] )
            if i_dict["product_name"] == product_release:
                no_fix=i_dict["fix_state"]
        affected_state=no_fix
    
    return affected_state  
	
def getRHFixPkgsCVE(CVE_json, product_release):

 
    # Filter json to select target 
    ### transform to Dict to filter
    affected_state="NA"
  
    upstreamPkg=cveDetails["upstream_fix"]
    return upstreamPkg
	
#---------------Usage -------------------------
proxies = {'http': 'http://yourproxy:8080/','https': 'https://your s proxy:8080/'}
cve_name="CVE-2016-4658"
cveDetails=getCVEDetailsRH(cve_name, proxies)
cveJson=json.dumps(cveDetails, indent=4, sort_keys=True)
print(cveJson)
print ('Severity: '+ cveDetails['threat_severity'] )
print ('Score3: ' +cveDetails["cvss3"]["cvss3_base_score"])
print ('Statement: '+ cveDetails['statement'] )

product="Red Hat Enterprise Linux 8"
state=getRHFixStateinCVE(cveDetails, product)
print (state)

fixedPkgs=getRHFixPkgsCVE(cveDetails, product)
for r in fixedPkgs:
	print (r)


 
